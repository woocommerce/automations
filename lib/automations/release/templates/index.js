/**
 * External dependencies
 */
const fs = require( 'fs' );
const path = require( 'path' );
const { handlebars } = require( 'hbs' );

/**
 * Internal dependencies
 */
const debug = require( '../../../debug' );

/**
 * @typedef {import('../../../typedefs').GitHub} GitHub
 * @typedef {import('../../../typedefs').GitHubContext} GitHubContext
 */

const TEMPLATES = {
	releasePullRequest: 'release-pull-request',
	patchReleasePullRequest: 'patch-release-pull-request',
	releaseInitialChecklist: 'release-initial-checklist',
	patchInitialChecklist: 'patch-initial-checklist',
};

const prFooter = `\n\n
###### :rocket: This pull request was generated by the [automations bot]({{ automationUrl }}) triggered by the creation of the branch: \`{{releaseBranch}}\`. cc @{{ username }}
`;

const commentFooter = `\n\n
###### :rocket: This comment was generated by the [automations bot]({{ automationUrl }}) triggered by the creation of the branch: \`{{releaseBranch}}\`. cc @{{ username }}
`;

handlebars.registerHelper(
	'githubHost',
	() => process.env.GHE_HOST || 'github.com'
);

handlebars.registerHelper(
	'automationUrl',
	() => 'https://github.com/woocommerce/automations'
);

module.exports = {
	TEMPLATES,
	/**
	 * @param {string}        name    Name of template to get
	 * @param {GitHubContext} context
	 * @param {GitHub}        octokit
	 */
	getTemplate: async ( name, context, octokit ) => {
		const templates = {
			[ TEMPLATES.releasePullRequest ]: {
				fallBack: 'release-pull-request.md',
				canOverride: true,
				footer: prFooter,
			},
			[ TEMPLATES.patchReleasePullRequest ]: {
				fallBack: 'patch-release-pull-request.md',
				canOverride: true,
				footer: prFooter,
			},
			[ TEMPLATES.releaseInitialChecklist ]: {
				fallBack: 'release-initial-checklist.md',
				canOverride: true,
				footer: commentFooter,
			},
			[ TEMPLATES.patchInitialChecklist ]: {
				fallBack: 'patch-initial-checklist.md',
				canOverride: true,
				footer: commentFooter,
			},
		};
		const templateObject = templates[ name ] || '';
		if ( ! templateObject ) {
			throw new Error(
				`There is no template supported for the given template named "${ name }"`
			);
		}
		// check if template exists on github repo
		let templateContents = '';
		if ( templateObject.canOverride ) {
			try {
				const response = await octokit.repos.getContents( {
					...context.repo,
					path: `.github/${ name }.md`,
				} );
				if ( response.content && response.encoding ) {
					const buffer = new Buffer(
						response.content,
						response.encoding
					);
					templateContents = buffer.toString( 'utf-8' );
				}
			} catch ( e ) {
				debug(
					`releaseRunner: Error retrieving the ${ name } template from the repository.`
				);
			}
		}
		// if templateContents is empty (or template cannot be overridden) then let's fallback to
		// the default template
		if ( ! templateContents ) {
			templateContents = fs.readFileSync(
				path.resolve(
					`./lib/automations/release/templates/${ templateObject.fallBack }`
				),
				'utf-8'
			);
		}
		return templateContents + templateObject.footer;
	},
	compile: ( contents ) => handlebars.compile( contents ),
};
